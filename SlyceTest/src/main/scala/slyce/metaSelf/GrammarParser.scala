// DO NOT EDIT : Automatically generated by Slyce v0.1.0 @ 11/29/2020
package slyce.metaSelf

import scala.annotation.tailrec

import scalaz.\/
import scalaz.-\/
import scalaz.\/-
import scalaz.Scalaz.ToBooleanOpsFromBoolean
import scalaz.Scalaz.ToOptionIdOps

import slyce.common.helpers._
import slyce.parse._
import slyce.parse.{architecture => arch}

object Data {

  sealed trait Token extends Dfa.Token
  sealed trait HasSpanToken extends Token with Dfa.Token.HasSpan
  object Token {
    case object EOF extends Token
    object __ {

      def apply(str: String, span: Dfa.Token.Span): Token =
        str match {
          case "\n" =>
            `\n`.apply(span)
          case "|" =>
            `|`.apply(span)
          case "~" =>
            `~`.apply(span)
          case "@start" =>
            `@start`.apply(span)
          case "(" =>
            `(`.apply(span)
          case ")" =>
            `)`.apply(span)
          case "." =>
            `.`.apply(span)
          case "+" =>
            `+`.apply(span)
          case "*" =>
            `*`.apply(span)
          case ":" =>
            `:`.apply(span)
          case "^" =>
            `^`.apply(span)
          case "?" =>
            `?`.apply(span)
          case _ =>
            ???
        }

      final case class `\n`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `|`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `~`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `@start`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `(`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `)`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `.`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `+`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `*`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `:`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `^`(span: Dfa.Token.Span) extends HasSpanToken
      final case class `?`(span: Dfa.Token.Span) extends HasSpanToken
    }
    final case class assocDir(text: String, span: Dfa.Token.Span) extends HasSpanToken
    final case class literal(text: String, span: Dfa.Token.Span) extends HasSpanToken
    final case class nonTerminal(text: String, span: Dfa.Token.Span) extends HasSpanToken
    final case class terminal(text: String, span: Dfa.Token.Span) extends HasSpanToken
  }
  object HasSpanToken {
    def unapply(arg: HasSpanToken): Option[Dfa.Token.Span] = arg.span.some
  }

  sealed trait NonTerminal
  object NonTerminal {

    sealed trait `Optional_?` extends NonTerminal {

      def toOption: Option[Token.__.`?`] =
        this match {
          case `Optional_?`._1(n) =>
            n.some
          case `Optional_?`._2 =>
            None
        }

    }
    object `Optional_?` {

      final case class _1(
        _1: Token.__.`?`,
      ) extends `Optional_?`

      case object _2 extends `Optional_?`

    }

    sealed trait `Optional_^` extends NonTerminal {

      def toOption: Option[Token.__.`^`] =
        this match {
          case `Optional_^`._1(n) =>
            n.some
          case `Optional_^`._2 =>
            None
        }

    }
    object `Optional_^` {

      final case class _1(
        _1: Token.__.`^`,
      ) extends `Optional_^`

      case object _2 extends `Optional_^`

    }

    sealed trait AnonList1 extends NonTerminal {

      def toList: List[Token.__.`\n`] = {
        @tailrec
        def loop(unseen: AnonList1, seen: List[Token.__.`\n`]): List[Token.__.`\n`] =
          unseen match {
            case AnonList1._1(n, tail) =>
              loop(tail, n :: seen)
            case AnonList1._2 =>
              seen.reverse
          }

          loop(this, Nil)
      }

    }
    object AnonList1 {

      final case class _1(
        _1: Token.__.`\n`,
        _2: NonTerminal.AnonList1,
      ) extends AnonList1

      case object _2 extends AnonList1

    }

    sealed trait AnonList2 extends NonTerminal {

      def toList: List[Token.__.`\n`] = {
        @tailrec
        def loop(unseen: AnonList2_2, seen: List[Token.__.`\n`]): List[Token.__.`\n`] =
          unseen match {
            case AnonList2_2._1(n, tail) =>
              loop(tail, n :: seen)
            case AnonList2_2._2 =>
              seen.reverse
        }

        this match {
          case AnonList2._1(n, tail) =>
            loop(tail, n :: Nil)
        }
      }

    }
    object AnonList2 {

      final case class _1(
        _1: Token.__.`\n`,
        _2: NonTerminal.AnonList2_2,
      ) extends AnonList2

    }

    sealed trait AnonList2_2 extends NonTerminal
    object AnonList2_2 {

      final case class _1(
        _1: Token.__.`\n`,
        _2: NonTerminal.AnonList2_2,
      ) extends AnonList2_2

      case object _2 extends AnonList2_2

    }

    sealed trait AnonList3 extends NonTerminal {

      def toList: List[NonTerminal.Nt] = {
        @tailrec
        def loop(unseen: AnonList3_2, seen: List[NonTerminal.Nt]): List[NonTerminal.Nt] =
          unseen match {
            case AnonList3_2._1(_, n, tail) =>
              loop(tail, n :: seen)
            case AnonList3_2._2 =>
              seen.reverse
        }

        this match {
          case AnonList3._1(n, tail) =>
            loop(tail, n :: Nil)
          case AnonList3._2 =>
            Nil
        }
      }

    }
    object AnonList3 {

      final case class _1(
        _1: NonTerminal.Nt,
        _2: NonTerminal.AnonList3_2,
      ) extends AnonList3

      case object _2 extends AnonList3

    }

    sealed trait AnonList3_2 extends NonTerminal
    object AnonList3_2 {

      final case class _1(
        _1: NonTerminal.AnonList2,
        _2: NonTerminal.Nt,
        _3: NonTerminal.AnonList3_2,
      ) extends AnonList3_2

      case object _2 extends AnonList3_2

    }

    sealed trait AnonList4 extends NonTerminal {

      def toList: List[NonTerminal.StdRl] = {
        @tailrec
        def loop(unseen: AnonList4_2, seen: List[NonTerminal.StdRl]): List[NonTerminal.StdRl] =
          unseen match {
            case AnonList4_2._1(_, _, n, tail) =>
              loop(tail, n :: seen)
            case AnonList4_2._2 =>
              seen.reverse
        }

        this match {
          case AnonList4._1(n, tail) =>
            loop(tail, n :: Nil)
        }
      }

    }
    object AnonList4 {

      final case class _1(
        _1: NonTerminal.StdRl,
        _2: NonTerminal.AnonList4_2,
      ) extends AnonList4

    }

    sealed trait AnonList4_2 extends NonTerminal
    object AnonList4_2 {

      final case class _1(
        _1: NonTerminal.AnonList2,
        _2: Token.__.`|`,
        _3: NonTerminal.StdRl,
        _4: NonTerminal.AnonList4_2,
      ) extends AnonList4_2

      case object _2 extends AnonList4_2

    }

    sealed trait AnonList5 extends NonTerminal {

      def toList: List[NonTerminal.ElementWExtras] = {
        @tailrec
        def loop(unseen: AnonList5_2, seen: List[NonTerminal.ElementWExtras]): List[NonTerminal.ElementWExtras] =
          unseen match {
            case AnonList5_2._1(n, tail) =>
              loop(tail, n :: seen)
            case AnonList5_2._2 =>
              seen.reverse
        }

        this match {
          case AnonList5._1(n, tail) =>
            loop(tail, n :: Nil)
        }
      }

    }
    object AnonList5 {

      final case class _1(
        _1: NonTerminal.ElementWExtras,
        _2: NonTerminal.AnonList5_2,
      ) extends AnonList5

    }

    sealed trait AnonList5_2 extends NonTerminal
    object AnonList5_2 {

      final case class _1(
        _1: NonTerminal.ElementWExtras,
        _2: NonTerminal.AnonList5_2,
      ) extends AnonList5_2

      case object _2 extends AnonList5_2

    }

    sealed trait AnonList6 extends NonTerminal {

      def toList: List[NonTerminal.AssocElement] = {
        @tailrec
        def loop(unseen: AnonList6_2, seen: List[NonTerminal.AssocElement]): List[NonTerminal.AssocElement] =
          unseen match {
            case AnonList6_2._1(_, _, n, tail) =>
              loop(tail, n :: seen)
            case AnonList6_2._2 =>
              seen.reverse
        }

        this match {
          case AnonList6._1(n, tail) =>
            loop(tail, n :: Nil)
        }
      }

    }
    object AnonList6 {

      final case class _1(
        _1: NonTerminal.AssocElement,
        _2: NonTerminal.AnonList6_2,
      ) extends AnonList6

    }

    sealed trait AnonList6_2 extends NonTerminal
    object AnonList6_2 {

      final case class _1(
        _1: NonTerminal.AnonList2,
        _2: Token.__.`|`,
        _3: NonTerminal.AssocElement,
        _4: NonTerminal.AnonList6_2,
      ) extends AnonList6_2

      case object _2 extends AnonList6_2

    }

    sealed trait AnonList extends NonTerminal
    object AnonList {

      final case class _1(
        _1: NonTerminal.ListBase,
        _2: NonTerminal.ListOp,
      ) extends AnonList

    }

    sealed trait AssocElement extends NonTerminal
    object AssocElement {

      final case class _1(
        _1: Token.assocDir,
        _2: NonTerminal.Element,
      ) extends AssocElement

    }

    sealed trait AssocNtBase extends NonTerminal
    object AssocNtBase {

      final case class _1(
        _1: Token.__.`~`,
        _2: NonTerminal.AnonList6,
        _3: NonTerminal.StdNtBase,
      ) extends AssocNtBase

    }

    sealed trait Element extends NonTerminal
    object Element {

      final case class _1(
        _1: Token.literal,
      ) extends Element

      final case class _2(
        _1: Token.terminal,
      ) extends Element

      final case class _3(
        _1: Token.nonTerminal,
      ) extends Element

      final case class _4(
        _1: NonTerminal.AnonList,
      ) extends Element

    }

    sealed trait ElementWExtras extends NonTerminal
    object ElementWExtras {

      final case class _1(
        _1: NonTerminal.`Optional_^`,
        _2: NonTerminal.Element,
        _3: NonTerminal.`Optional_?`,
      ) extends ElementWExtras

    }

    sealed trait Grammar extends NonTerminal
    object Grammar {

      final case class _1(
        _1: NonTerminal.AnonList1,
        _2: Token.__.`@start`,
        _3: Token.nonTerminal,
        _4: NonTerminal.AnonList2,
        _5: NonTerminal.AnonList3,
        _6: NonTerminal.AnonList1,
      ) extends Grammar

    }

    sealed trait ListBase extends NonTerminal
    object ListBase {

      final case class _1(
        _1: NonTerminal.Element,
      ) extends ListBase

      final case class _2(
        _1: Token.__.`(`,
        _2: NonTerminal.AnonList5,
        _3: Token.__.`)`,
      ) extends ListBase

      final case class _3(
        _1: Token.__.`(`,
        _2: NonTerminal.AnonList5,
        _3: Token.__.`.`,
        _4: NonTerminal.AnonList5,
        _5: Token.__.`)`,
      ) extends ListBase

    }

    sealed trait ListNtBase extends NonTerminal
    object ListNtBase {

      final case class _1(
        _1: NonTerminal.ListOp,
        _2: NonTerminal.ListBase,
      ) extends ListNtBase

    }

    sealed trait ListOp extends NonTerminal
    object ListOp {

      final case class _1(
        _1: Token.__.`+`,
      ) extends ListOp

      final case class _2(
        _1: Token.__.`*`,
      ) extends ListOp

    }

    sealed trait Nt extends NonTerminal
    object Nt {

      final case class _1(
        _1: Token.nonTerminal,
        _2: NonTerminal.NtBase,
      ) extends Nt

    }

    sealed trait NtBase extends NonTerminal
    object NtBase {

      final case class _1(
        _1: NonTerminal.StdNtBase,
      ) extends NtBase

      final case class _2(
        _1: NonTerminal.ListNtBase,
      ) extends NtBase

      final case class _3(
        _1: NonTerminal.AssocNtBase,
      ) extends NtBase

    }

    sealed trait StdNtBase extends NonTerminal
    object StdNtBase {

      final case class _1(
        _1: NonTerminal.StdOp,
        _2: NonTerminal.AnonList4,
      ) extends StdNtBase

    }

    sealed trait StdOp extends NonTerminal
    object StdOp {

      final case class _1(
        _1: Token.__.`:`,
      ) extends StdOp

      final case class _2(
        _1: Token.__.`^`,
      ) extends StdOp

    }

    sealed trait StdRl extends NonTerminal {

      def toList: List[NonTerminal.ElementWExtras] = {
        @tailrec
        def loop(unseen: StdRl, seen: List[NonTerminal.ElementWExtras]): List[NonTerminal.ElementWExtras] =
          unseen match {
            case StdRl._1(n, tail) =>
              loop(tail, n :: seen)
            case StdRl._2 =>
              seen.reverse
          }

          loop(this, Nil)
      }

    }
    object StdRl {

      final case class _1(
        _1: NonTerminal.ElementWExtras,
        _2: NonTerminal.StdRl,
      ) extends StdRl

      case object _2 extends StdRl

    }

    sealed trait __Start extends NonTerminal
    object __Start {

      final case class _1(
        _1: NonTerminal.Grammar,
        _2: Token.EOF.type,
      ) extends __Start

    }

  }

}

object GrammarParser extends arch.Parser[String, List[String], Data.NonTerminal.Grammar] {
  import Data._

  private val lexer: Dfa[Token] = {
    lazy val s0: Dfa.State[Token] =
      Dfa.State(
        id = 0,
        transitions = Map(
          0x9.toChar -> Some(Lazy(s2)), // '\t'
          0xA.toChar -> Some(Lazy(s15)), // '\n'
          0x20.toChar -> Some(Lazy(s2)), // ' '
          0x22.toChar -> Some(Lazy(s3)), // '"'
          0x28.toChar -> Some(Lazy(s15)), // '('
          0x29.toChar -> Some(Lazy(s15)), // ')'
          0x2A.toChar -> Some(Lazy(s12)), // '*'
          0x2B.toChar -> Some(Lazy(s12)), // '+'
          0x2E.toChar -> Some(Lazy(s15)), // '.'
          0x3A.toChar -> Some(Lazy(s12)), // ':'
          0x3C.toChar -> Some(Lazy(s11)), // '<'
          0x3E.toChar -> Some(Lazy(s11)), // '>'
          0x3F.toChar -> Some(Lazy(s15)), // '?'
          0x40.toChar -> Some(Lazy(s6)), // '@'
          0x41.toChar -> Some(Lazy(s8)), // 'A'
          0x42.toChar -> Some(Lazy(s8)), // 'B'
          0x43.toChar -> Some(Lazy(s8)), // 'C'
          0x44.toChar -> Some(Lazy(s8)), // 'D'
          0x45.toChar -> Some(Lazy(s8)), // 'E'
          0x46.toChar -> Some(Lazy(s8)), // 'F'
          0x47.toChar -> Some(Lazy(s8)), // 'G'
          0x48.toChar -> Some(Lazy(s8)), // 'H'
          0x49.toChar -> Some(Lazy(s8)), // 'I'
          0x4A.toChar -> Some(Lazy(s8)), // 'J'
          0x4B.toChar -> Some(Lazy(s8)), // 'K'
          0x4C.toChar -> Some(Lazy(s8)), // 'L'
          0x4D.toChar -> Some(Lazy(s8)), // 'M'
          0x4E.toChar -> Some(Lazy(s8)), // 'N'
          0x4F.toChar -> Some(Lazy(s8)), // 'O'
          0x50.toChar -> Some(Lazy(s8)), // 'P'
          0x51.toChar -> Some(Lazy(s8)), // 'Q'
          0x52.toChar -> Some(Lazy(s8)), // 'R'
          0x53.toChar -> Some(Lazy(s8)), // 'S'
          0x54.toChar -> Some(Lazy(s8)), // 'T'
          0x55.toChar -> Some(Lazy(s8)), // 'U'
          0x56.toChar -> Some(Lazy(s8)), // 'V'
          0x57.toChar -> Some(Lazy(s8)), // 'W'
          0x58.toChar -> Some(Lazy(s8)), // 'X'
          0x59.toChar -> Some(Lazy(s8)), // 'Y'
          0x5A.toChar -> Some(Lazy(s8)), // 'Z'
          0x5E.toChar -> Some(Lazy(s12)), // '^'
          0x61.toChar -> Some(Lazy(s9)), // 'a'
          0x62.toChar -> Some(Lazy(s9)), // 'b'
          0x63.toChar -> Some(Lazy(s9)), // 'c'
          0x64.toChar -> Some(Lazy(s9)), // 'd'
          0x65.toChar -> Some(Lazy(s9)), // 'e'
          0x66.toChar -> Some(Lazy(s9)), // 'f'
          0x67.toChar -> Some(Lazy(s9)), // 'g'
          0x68.toChar -> Some(Lazy(s9)), // 'h'
          0x69.toChar -> Some(Lazy(s9)), // 'i'
          0x6A.toChar -> Some(Lazy(s9)), // 'j'
          0x6B.toChar -> Some(Lazy(s9)), // 'k'
          0x6C.toChar -> Some(Lazy(s9)), // 'l'
          0x6D.toChar -> Some(Lazy(s9)), // 'm'
          0x6E.toChar -> Some(Lazy(s9)), // 'n'
          0x6F.toChar -> Some(Lazy(s9)), // 'o'
          0x70.toChar -> Some(Lazy(s9)), // 'p'
          0x71.toChar -> Some(Lazy(s9)), // 'q'
          0x72.toChar -> Some(Lazy(s9)), // 'r'
          0x73.toChar -> Some(Lazy(s9)), // 's'
          0x74.toChar -> Some(Lazy(s9)), // 't'
          0x75.toChar -> Some(Lazy(s9)), // 'u'
          0x76.toChar -> Some(Lazy(s9)), // 'v'
          0x77.toChar -> Some(Lazy(s9)), // 'w'
          0x78.toChar -> Some(Lazy(s9)), // 'x'
          0x79.toChar -> Some(Lazy(s9)), // 'y'
          0x7A.toChar -> Some(Lazy(s9)), // 'z'
          0x7C.toChar -> Some(Lazy(s15)), // '|'
          0x7E.toChar -> Some(Lazy(s12)), // '~'
        ),
        elseTransition = None,
        yields = None,
      )
    lazy val s1: Dfa.State[Token] =
      Dfa.State(
        id = 1,
        transitions = Map(
          0x74.toChar -> Some(Lazy(s4)), // 't'
        ),
        elseTransition = None,
        yields = None,
      )
    lazy val s2: Dfa.State[Token] =
      Dfa.State(
        id = 2,
        transitions = Map(
          0x9.toChar -> Some(Lazy(s2)), // '\t'
          0x20.toChar -> Some(Lazy(s2)), // ' '
        ),
        elseTransition = None,
        yields = Some(Dfa.State.Yields(s0)()),
      )
    lazy val s3: Dfa.State[Token] =
      Dfa.State(
        id = 3,
        transitions = Map(
          0x9.toChar -> None, // '\t'
          0xA.toChar -> None, // '\n'
          0x22.toChar -> None, // '"'
          0x5C.toChar -> Some(Lazy(s5)), // '\\'
        ),
        elseTransition = Some(Lazy(s7)),
        yields = None,
      )
    lazy val s4: Dfa.State[Token] =
      Dfa.State(
        id = 4,
        transitions = Map.empty,
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.__.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s5: Dfa.State[Token] =
      Dfa.State(
        id = 5,
        transitions = Map(
          0x22.toChar -> Some(Lazy(s7)), // '"'
          0x5C.toChar -> Some(Lazy(s7)), // '\\'
          0x6E.toChar -> Some(Lazy(s7)), // 'n'
          0x74.toChar -> Some(Lazy(s7)), // 't'
        ),
        elseTransition = None,
        yields = None,
      )
    lazy val s6: Dfa.State[Token] =
      Dfa.State(
        id = 6,
        transitions = Map(
          0x73.toChar -> Some(Lazy(s13)), // 's'
        ),
        elseTransition = None,
        yields = None,
      )
    lazy val s7: Dfa.State[Token] =
      Dfa.State(
        id = 7,
        transitions = Map(
          0x9.toChar -> None, // '\t'
          0xA.toChar -> None, // '\n'
          0x22.toChar -> Some(Lazy(s10)), // '"'
          0x5C.toChar -> Some(Lazy(s5)), // '\\'
        ),
        elseTransition = Some(Lazy(s7)),
        yields = None,
      )
    lazy val s8: Dfa.State[Token] =
      Dfa.State(
        id = 8,
        transitions = Map(
          0x30.toChar -> Some(Lazy(s8)), // '0'
          0x31.toChar -> Some(Lazy(s8)), // '1'
          0x32.toChar -> Some(Lazy(s8)), // '2'
          0x33.toChar -> Some(Lazy(s8)), // '3'
          0x34.toChar -> Some(Lazy(s8)), // '4'
          0x35.toChar -> Some(Lazy(s8)), // '5'
          0x36.toChar -> Some(Lazy(s8)), // '6'
          0x37.toChar -> Some(Lazy(s8)), // '7'
          0x38.toChar -> Some(Lazy(s8)), // '8'
          0x39.toChar -> Some(Lazy(s8)), // '9'
          0x41.toChar -> Some(Lazy(s8)), // 'A'
          0x42.toChar -> Some(Lazy(s8)), // 'B'
          0x43.toChar -> Some(Lazy(s8)), // 'C'
          0x44.toChar -> Some(Lazy(s8)), // 'D'
          0x45.toChar -> Some(Lazy(s8)), // 'E'
          0x46.toChar -> Some(Lazy(s8)), // 'F'
          0x47.toChar -> Some(Lazy(s8)), // 'G'
          0x48.toChar -> Some(Lazy(s8)), // 'H'
          0x49.toChar -> Some(Lazy(s8)), // 'I'
          0x4A.toChar -> Some(Lazy(s8)), // 'J'
          0x4B.toChar -> Some(Lazy(s8)), // 'K'
          0x4C.toChar -> Some(Lazy(s8)), // 'L'
          0x4D.toChar -> Some(Lazy(s8)), // 'M'
          0x4E.toChar -> Some(Lazy(s8)), // 'N'
          0x4F.toChar -> Some(Lazy(s8)), // 'O'
          0x50.toChar -> Some(Lazy(s8)), // 'P'
          0x51.toChar -> Some(Lazy(s8)), // 'Q'
          0x52.toChar -> Some(Lazy(s8)), // 'R'
          0x53.toChar -> Some(Lazy(s8)), // 'S'
          0x54.toChar -> Some(Lazy(s8)), // 'T'
          0x55.toChar -> Some(Lazy(s8)), // 'U'
          0x56.toChar -> Some(Lazy(s8)), // 'V'
          0x57.toChar -> Some(Lazy(s8)), // 'W'
          0x58.toChar -> Some(Lazy(s8)), // 'X'
          0x59.toChar -> Some(Lazy(s8)), // 'Y'
          0x5A.toChar -> Some(Lazy(s8)), // 'Z'
          0x5F.toChar -> Some(Lazy(s8)), // '_'
          0x61.toChar -> Some(Lazy(s8)), // 'a'
          0x62.toChar -> Some(Lazy(s8)), // 'b'
          0x63.toChar -> Some(Lazy(s8)), // 'c'
          0x64.toChar -> Some(Lazy(s8)), // 'd'
          0x65.toChar -> Some(Lazy(s8)), // 'e'
          0x66.toChar -> Some(Lazy(s8)), // 'f'
          0x67.toChar -> Some(Lazy(s8)), // 'g'
          0x68.toChar -> Some(Lazy(s8)), // 'h'
          0x69.toChar -> Some(Lazy(s8)), // 'i'
          0x6A.toChar -> Some(Lazy(s8)), // 'j'
          0x6B.toChar -> Some(Lazy(s8)), // 'k'
          0x6C.toChar -> Some(Lazy(s8)), // 'l'
          0x6D.toChar -> Some(Lazy(s8)), // 'm'
          0x6E.toChar -> Some(Lazy(s8)), // 'n'
          0x6F.toChar -> Some(Lazy(s8)), // 'o'
          0x70.toChar -> Some(Lazy(s8)), // 'p'
          0x71.toChar -> Some(Lazy(s8)), // 'q'
          0x72.toChar -> Some(Lazy(s8)), // 'r'
          0x73.toChar -> Some(Lazy(s8)), // 's'
          0x74.toChar -> Some(Lazy(s8)), // 't'
          0x75.toChar -> Some(Lazy(s8)), // 'u'
          0x76.toChar -> Some(Lazy(s8)), // 'v'
          0x77.toChar -> Some(Lazy(s8)), // 'w'
          0x78.toChar -> Some(Lazy(s8)), // 'x'
          0x79.toChar -> Some(Lazy(s8)), // 'y'
          0x7A.toChar -> Some(Lazy(s8)), // 'z'
        ),
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.nonTerminal.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s9: Dfa.State[Token] =
      Dfa.State(
        id = 9,
        transitions = Map(
          0x30.toChar -> Some(Lazy(s9)), // '0'
          0x31.toChar -> Some(Lazy(s9)), // '1'
          0x32.toChar -> Some(Lazy(s9)), // '2'
          0x33.toChar -> Some(Lazy(s9)), // '3'
          0x34.toChar -> Some(Lazy(s9)), // '4'
          0x35.toChar -> Some(Lazy(s9)), // '5'
          0x36.toChar -> Some(Lazy(s9)), // '6'
          0x37.toChar -> Some(Lazy(s9)), // '7'
          0x38.toChar -> Some(Lazy(s9)), // '8'
          0x39.toChar -> Some(Lazy(s9)), // '9'
          0x41.toChar -> Some(Lazy(s9)), // 'A'
          0x42.toChar -> Some(Lazy(s9)), // 'B'
          0x43.toChar -> Some(Lazy(s9)), // 'C'
          0x44.toChar -> Some(Lazy(s9)), // 'D'
          0x45.toChar -> Some(Lazy(s9)), // 'E'
          0x46.toChar -> Some(Lazy(s9)), // 'F'
          0x47.toChar -> Some(Lazy(s9)), // 'G'
          0x48.toChar -> Some(Lazy(s9)), // 'H'
          0x49.toChar -> Some(Lazy(s9)), // 'I'
          0x4A.toChar -> Some(Lazy(s9)), // 'J'
          0x4B.toChar -> Some(Lazy(s9)), // 'K'
          0x4C.toChar -> Some(Lazy(s9)), // 'L'
          0x4D.toChar -> Some(Lazy(s9)), // 'M'
          0x4E.toChar -> Some(Lazy(s9)), // 'N'
          0x4F.toChar -> Some(Lazy(s9)), // 'O'
          0x50.toChar -> Some(Lazy(s9)), // 'P'
          0x51.toChar -> Some(Lazy(s9)), // 'Q'
          0x52.toChar -> Some(Lazy(s9)), // 'R'
          0x53.toChar -> Some(Lazy(s9)), // 'S'
          0x54.toChar -> Some(Lazy(s9)), // 'T'
          0x55.toChar -> Some(Lazy(s9)), // 'U'
          0x56.toChar -> Some(Lazy(s9)), // 'V'
          0x57.toChar -> Some(Lazy(s9)), // 'W'
          0x58.toChar -> Some(Lazy(s9)), // 'X'
          0x59.toChar -> Some(Lazy(s9)), // 'Y'
          0x5A.toChar -> Some(Lazy(s9)), // 'Z'
          0x5F.toChar -> Some(Lazy(s9)), // '_'
          0x61.toChar -> Some(Lazy(s9)), // 'a'
          0x62.toChar -> Some(Lazy(s9)), // 'b'
          0x63.toChar -> Some(Lazy(s9)), // 'c'
          0x64.toChar -> Some(Lazy(s9)), // 'd'
          0x65.toChar -> Some(Lazy(s9)), // 'e'
          0x66.toChar -> Some(Lazy(s9)), // 'f'
          0x67.toChar -> Some(Lazy(s9)), // 'g'
          0x68.toChar -> Some(Lazy(s9)), // 'h'
          0x69.toChar -> Some(Lazy(s9)), // 'i'
          0x6A.toChar -> Some(Lazy(s9)), // 'j'
          0x6B.toChar -> Some(Lazy(s9)), // 'k'
          0x6C.toChar -> Some(Lazy(s9)), // 'l'
          0x6D.toChar -> Some(Lazy(s9)), // 'm'
          0x6E.toChar -> Some(Lazy(s9)), // 'n'
          0x6F.toChar -> Some(Lazy(s9)), // 'o'
          0x70.toChar -> Some(Lazy(s9)), // 'p'
          0x71.toChar -> Some(Lazy(s9)), // 'q'
          0x72.toChar -> Some(Lazy(s9)), // 'r'
          0x73.toChar -> Some(Lazy(s9)), // 's'
          0x74.toChar -> Some(Lazy(s9)), // 't'
          0x75.toChar -> Some(Lazy(s9)), // 'u'
          0x76.toChar -> Some(Lazy(s9)), // 'v'
          0x77.toChar -> Some(Lazy(s9)), // 'w'
          0x78.toChar -> Some(Lazy(s9)), // 'x'
          0x79.toChar -> Some(Lazy(s9)), // 'y'
          0x7A.toChar -> Some(Lazy(s9)), // 'z'
        ),
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.terminal.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s10: Dfa.State[Token] =
      Dfa.State(
        id = 10,
        transitions = Map.empty,
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.literal.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s11: Dfa.State[Token] =
      Dfa.State(
        id = 11,
        transitions = Map.empty,
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.assocDir.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s12: Dfa.State[Token] =
      Dfa.State(
        id = 12,
        transitions = Map.empty,
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.__.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s13: Dfa.State[Token] =
      Dfa.State(
        id = 13,
        transitions = Map(
          0x74.toChar -> Some(Lazy(s16)), // 't'
        ),
        elseTransition = None,
        yields = None,
      )
    lazy val s14: Dfa.State[Token] =
      Dfa.State(
        id = 14,
        transitions = Map(
          0x72.toChar -> Some(Lazy(s1)), // 'r'
        ),
        elseTransition = None,
        yields = None,
      )
    lazy val s15: Dfa.State[Token] =
      Dfa.State(
        id = 15,
        transitions = Map.empty,
        elseTransition = None,
        yields = Some(
          Dfa.State.Yields(s0)(
            Dfa.State.Yields.Yield(
              tokF = Token.__.apply,
              spanRange = (0,-1),
            ),
          ),
        ),
      )
    lazy val s16: Dfa.State[Token] =
      Dfa.State(
        id = 16,
        transitions = Map(
          0x61.toChar -> Some(Lazy(s14)), // 'a'
        ),
        elseTransition = None,
        yields = None,
      )

    Dfa(s0, Token.EOF)
  }

  private val grammar: Builder[Token, NonTerminal, NonTerminal.Grammar]#StateMachine =
    Builder.builder[Token, NonTerminal, NonTerminal.Grammar].build { builder =>
      val elem: Matcher[builder.StackFrame.StackElement, builder.ElementT] = { element =>
        builder.StackFrame.StackElement.unapply(element).map(_._3)
      }
      val stateElem: Matcher[builder.StackFrame.StackElement, (builder.State, builder.ElementT)] = { element =>
        builder.StackFrame.StackElement.unapply(element).map { case (_1, _, _3) => (_1, _3) }
      }

      lazy val s0: builder.State =
        builder.State(
          id = 0,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList1) => s1
            case \/-(_: NonTerminal.Grammar) => s2
            case -\/(_: Token.__.`\n`) => s3
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList1._2,
          ),
          finalReturnF = None,
        )
      lazy val s1: builder.State =
        builder.State(
          id = 1,
          acceptF = Some {
            case -\/(_: Token.__.`@start`) => s4
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s2: builder.State =
        builder.State(
          id = 2,
          acceptF = Some {
            case -\/(Token.EOF) => s5
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s3: builder.State =
        builder.State(
          id = 3,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList1) => s6
            case -\/(_: Token.__.`\n`) => s3
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList1._2,
          ),
          finalReturnF = None,
        )
      lazy val s4: builder.State =
        builder.State(
          id = 4,
          acceptF = Some {
            case -\/(_: Token.nonTerminal) => s7
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s5: builder.State =
        builder.State(
          id = 5,
          acceptF = None,
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = Some {
            case elem(-\/(Token.EOF)) :: elem(\/-(rawTree: NonTerminal.Grammar)) :: Nil =>
              rawTree
          },
        )
      lazy val s6: builder.State =
        builder.State(
          id = 6,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList1)) :: stateElem(state, -\/(_1: Token.__.`\n`)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList1._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s7: builder.State =
        builder.State(
          id = 7,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList2) => s8
            case -\/(_: Token.__.`\n`) => s9
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s8: builder.State =
        builder.State(
          id = 8,
          acceptF = Some {
            case \/-(_: NonTerminal.Nt) => s11
            case -\/(_: Token.nonTerminal) => s20
            case \/-(_: NonTerminal.AnonList3) => s16
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList3._2,
          ),
          finalReturnF = None,
        )
      lazy val s9: builder.State =
        builder.State(
          id = 9,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList2_2) => s18
            case -\/(_: Token.__.`\n`) => s10
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList2_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s10: builder.State =
        builder.State(
          id = 10,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList2_2) => s19
            case -\/(_: Token.__.`\n`) => s10
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList2_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s11: builder.State =
        builder.State(
          id = 11,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList3_2) => s12
            case \/-(_: NonTerminal.AnonList2) => s13
            case -\/(_: Token.__.`\n`) => s9
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList3_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s12: builder.State =
        builder.State(
          id = 12,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList3_2)) :: stateElem(state, \/-(_1: NonTerminal.Nt)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList3._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s13: builder.State =
        builder.State(
          id = 13,
          acceptF = Some {
            case \/-(_: NonTerminal.Nt) => s14
            case -\/(_: Token.nonTerminal) => s20
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s14: builder.State =
        builder.State(
          id = 14,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList3_2) => s15
            case \/-(_: NonTerminal.AnonList2) => s13
            case -\/(_: Token.__.`\n`) => s9
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList3_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s15: builder.State =
        builder.State(
          id = 15,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_3: NonTerminal.AnonList3_2)) :: elem(\/-(_2: NonTerminal.Nt)) :: stateElem(state, \/-(_1: NonTerminal.AnonList2)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList3_2._1(_1, _2, _3),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s16: builder.State =
        builder.State(
          id = 16,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList1) => s17
            case -\/(_: Token.__.`\n`) => s3
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList1._2,
          ),
          finalReturnF = None,
        )
      lazy val s17: builder.State =
        builder.State(
          id = 17,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_6: NonTerminal.AnonList1)) :: elem(\/-(_5: NonTerminal.AnonList3)) :: elem(\/-(_4: NonTerminal.AnonList2)) :: elem(-\/(_3: Token.nonTerminal)) :: elem(-\/(_2: Token.__.`@start`)) :: stateElem(state, \/-(_1: NonTerminal.AnonList1)) :: stackT =>
                (
                  state,
                  NonTerminal.Grammar._1(_1, _2, _3, _4, _5, _6),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s18: builder.State =
        builder.State(
          id = 18,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList2_2)) :: stateElem(state, -\/(_1: Token.__.`\n`)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList2._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s19: builder.State =
        builder.State(
          id = 19,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList2_2)) :: stateElem(state, -\/(_1: Token.__.`\n`)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList2_2._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s20: builder.State =
        builder.State(
          id = 20,
          acceptF = Some {
            case \/-(_: NonTerminal.StdNtBase) => s65
            case \/-(_: NonTerminal.AssocNtBase) => s44
            case -\/(_: Token.__.`^`) => s21
            case \/-(_: NonTerminal.ListOp) => s22
            case -\/(_: Token.__.`~`) => s56
            case \/-(_: NonTerminal.StdOp) => s34
            case \/-(_: NonTerminal.NtBase) => s51
            case -\/(_: Token.__.`+`) => s50
            case -\/(_: Token.__.`:`) => s24
            case -\/(_: Token.__.`*`) => s43
            case \/-(_: NonTerminal.ListNtBase) => s53
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s21: builder.State =
        builder.State(
          id = 21,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.__.`^`)) :: stackT =>
                (
                  state,
                  NonTerminal.StdOp._2(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s22: builder.State =
        builder.State(
          id = 22,
          acceptF = Some {
            case \/-(_: NonTerminal.Element) => s52
            case \/-(_: NonTerminal.AnonList) => s45
            case \/-(_: NonTerminal.ListBase) => s46
            case -\/(_: Token.literal) => s30
            case -\/(_: Token.nonTerminal) => s23
            case -\/(_: Token.terminal) => s25
            case -\/(_: Token.__.`(`) => s26
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s23: builder.State =
        builder.State(
          id = 23,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.nonTerminal)) :: stackT =>
                (
                  state,
                  NonTerminal.Element._3(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s24: builder.State =
        builder.State(
          id = 24,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.__.`:`)) :: stackT =>
                (
                  state,
                  NonTerminal.StdOp._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s25: builder.State =
        builder.State(
          id = 25,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.terminal)) :: stackT =>
                (
                  state,
                  NonTerminal.Element._2(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s26: builder.State =
        builder.State(
          id = 26,
          acceptF = Some {
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case \/-(_: NonTerminal.AnonList5) => s27
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.ElementWExtras) => s68
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s27: builder.State =
        builder.State(
          id = 27,
          acceptF = Some {
            case -\/(_: Token.__.`.`) => s41
            case -\/(_: Token.__.`)`) => s29
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s28: builder.State =
        builder.State(
          id = 28,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.__.`^`)) :: stackT =>
                (
                  state,
                  NonTerminal.`Optional_^`._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s29: builder.State =
        builder.State(
          id = 29,
          acceptF = None,
          returnFs = List(
            {
              case elem(-\/(_3: Token.__.`)`)) :: elem(\/-(_2: NonTerminal.AnonList5)) :: stateElem(state, -\/(_1: Token.__.`(`)) :: stackT =>
                (
                  state,
                  NonTerminal.ListBase._2(_1, _2, _3),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s30: builder.State =
        builder.State(
          id = 30,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.literal)) :: stackT =>
                (
                  state,
                  NonTerminal.Element._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s31: builder.State =
        builder.State(
          id = 31,
          acceptF = Some {
            case \/-(_: NonTerminal.Element) => s32
            case \/-(_: NonTerminal.AnonList) => s45
            case \/-(_: NonTerminal.ListBase) => s55
            case -\/(_: Token.literal) => s30
            case -\/(_: Token.nonTerminal) => s23
            case -\/(_: Token.terminal) => s25
            case -\/(_: Token.__.`(`) => s26
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s32: builder.State =
        builder.State(
          id = 32,
          acceptF = Some {
            case -\/(_: Token.__.`?`) => s33
            case \/-(_: NonTerminal.`Optional_?`) => s54
          },
          returnFs = List(
            {
              case stateElem(state, \/-(_1: NonTerminal.Element)) :: stackT =>
                (
                  state,
                  NonTerminal.ListBase._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = List(
            NonTerminal.`Optional_?`._2,
          ),
          finalReturnF = None,
        )
      lazy val s33: builder.State =
        builder.State(
          id = 33,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.__.`?`)) :: stackT =>
                (
                  state,
                  NonTerminal.`Optional_?`._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s34: builder.State =
        builder.State(
          id = 34,
          acceptF = Some {
            case \/-(_: NonTerminal.StdRl) => s37
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.AnonList4) => s36
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case \/-(_: NonTerminal.ElementWExtras) => s35
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.StdRl._2,
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s35: builder.State =
        builder.State(
          id = 35,
          acceptF = Some {
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.StdRl) => s73
            case \/-(_: NonTerminal.ElementWExtras) => s35
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.StdRl._2,
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s36: builder.State =
        builder.State(
          id = 36,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList4)) :: stateElem(state, \/-(_1: NonTerminal.StdOp)) :: stackT =>
                (
                  state,
                  NonTerminal.StdNtBase._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s37: builder.State =
        builder.State(
          id = 37,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList4_2) => s40
            case \/-(_: NonTerminal.AnonList2) => s38
            case -\/(_: Token.__.`\n`) => s9
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList4_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s38: builder.State =
        builder.State(
          id = 38,
          acceptF = Some {
            case -\/(_: Token.__.`|`) => s39
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s39: builder.State =
        builder.State(
          id = 39,
          acceptF = Some {
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.StdRl) => s47
            case \/-(_: NonTerminal.ElementWExtras) => s35
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.StdRl._2,
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s40: builder.State =
        builder.State(
          id = 40,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList4_2)) :: stateElem(state, \/-(_1: NonTerminal.StdRl)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList4._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s41: builder.State =
        builder.State(
          id = 41,
          acceptF = Some {
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case \/-(_: NonTerminal.AnonList5) => s42
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.ElementWExtras) => s68
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s42: builder.State =
        builder.State(
          id = 42,
          acceptF = Some {
            case -\/(_: Token.__.`)`) => s72
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s43: builder.State =
        builder.State(
          id = 43,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.__.`*`)) :: stackT =>
                (
                  state,
                  NonTerminal.ListOp._2(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s44: builder.State =
        builder.State(
          id = 44,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, \/-(_1: NonTerminal.AssocNtBase)) :: stackT =>
                (
                  state,
                  NonTerminal.NtBase._3(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s45: builder.State =
        builder.State(
          id = 45,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, \/-(_1: NonTerminal.AnonList)) :: stackT =>
                (
                  state,
                  NonTerminal.Element._4(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s46: builder.State =
        builder.State(
          id = 46,
          acceptF = Some {
            case -\/(_: Token.__.`+`) => s50
            case -\/(_: Token.__.`*`) => s43
            case \/-(_: NonTerminal.ListOp) => s48
          },
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.ListBase)) :: stateElem(state, \/-(_1: NonTerminal.ListOp)) :: stackT =>
                (
                  state,
                  NonTerminal.ListNtBase._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s47: builder.State =
        builder.State(
          id = 47,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList4_2) => s49
            case \/-(_: NonTerminal.AnonList2) => s38
            case -\/(_: Token.__.`\n`) => s9
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList4_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s48: builder.State =
        builder.State(
          id = 48,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.ListOp)) :: stateElem(state, \/-(_1: NonTerminal.ListBase)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s49: builder.State =
        builder.State(
          id = 49,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_4: NonTerminal.AnonList4_2)) :: elem(\/-(_3: NonTerminal.StdRl)) :: elem(-\/(_2: Token.__.`|`)) :: stateElem(state, \/-(_1: NonTerminal.AnonList2)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList4_2._1(_1, _2, _3, _4),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s50: builder.State =
        builder.State(
          id = 50,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, -\/(_1: Token.__.`+`)) :: stackT =>
                (
                  state,
                  NonTerminal.ListOp._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s51: builder.State =
        builder.State(
          id = 51,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.NtBase)) :: stateElem(state, -\/(_1: Token.nonTerminal)) :: stackT =>
                (
                  state,
                  NonTerminal.Nt._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s52: builder.State =
        builder.State(
          id = 52,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, \/-(_1: NonTerminal.Element)) :: stackT =>
                (
                  state,
                  NonTerminal.ListBase._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s53: builder.State =
        builder.State(
          id = 53,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, \/-(_1: NonTerminal.ListNtBase)) :: stackT =>
                (
                  state,
                  NonTerminal.NtBase._2(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s54: builder.State =
        builder.State(
          id = 54,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_3: NonTerminal.`Optional_?`)) :: elem(\/-(_2: NonTerminal.Element)) :: stateElem(state, \/-(_1: NonTerminal.`Optional_^`)) :: stackT =>
                (
                  state,
                  NonTerminal.ElementWExtras._1(_1, _2, _3),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s55: builder.State =
        builder.State(
          id = 55,
          acceptF = Some {
            case -\/(_: Token.__.`+`) => s50
            case -\/(_: Token.__.`*`) => s43
            case \/-(_: NonTerminal.ListOp) => s48
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s56: builder.State =
        builder.State(
          id = 56,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList6) => s57
            case \/-(_: NonTerminal.AssocElement) => s59
            case -\/(_: Token.assocDir) => s66
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s57: builder.State =
        builder.State(
          id = 57,
          acceptF = Some {
            case \/-(_: NonTerminal.StdNtBase) => s58
            case -\/(_: Token.__.`:`) => s24
            case \/-(_: NonTerminal.StdOp) => s34
            case -\/(_: Token.__.`^`) => s21
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s58: builder.State =
        builder.State(
          id = 58,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_3: NonTerminal.StdNtBase)) :: elem(\/-(_2: NonTerminal.AnonList6)) :: stateElem(state, -\/(_1: Token.__.`~`)) :: stackT =>
                (
                  state,
                  NonTerminal.AssocNtBase._1(_1, _2, _3),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s59: builder.State =
        builder.State(
          id = 59,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList2) => s61
            case -\/(_: Token.__.`\n`) => s9
            case \/-(_: NonTerminal.AnonList6_2) => s60
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList6_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s60: builder.State =
        builder.State(
          id = 60,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList6_2)) :: stateElem(state, \/-(_1: NonTerminal.AssocElement)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList6._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s61: builder.State =
        builder.State(
          id = 61,
          acceptF = Some {
            case -\/(_: Token.__.`|`) => s62
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s62: builder.State =
        builder.State(
          id = 62,
          acceptF = Some {
            case \/-(_: NonTerminal.AssocElement) => s63
            case -\/(_: Token.assocDir) => s66
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s63: builder.State =
        builder.State(
          id = 63,
          acceptF = Some {
            case \/-(_: NonTerminal.AnonList2) => s61
            case -\/(_: Token.__.`\n`) => s9
            case \/-(_: NonTerminal.AnonList6_2) => s64
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList6_2._2,
          ),
          finalReturnF = None,
        )
      lazy val s64: builder.State =
        builder.State(
          id = 64,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_4: NonTerminal.AnonList6_2)) :: elem(\/-(_3: NonTerminal.AssocElement)) :: elem(-\/(_2: Token.__.`|`)) :: stateElem(state, \/-(_1: NonTerminal.AnonList2)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList6_2._1(_1, _2, _3, _4),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s65: builder.State =
        builder.State(
          id = 65,
          acceptF = None,
          returnFs = List(
            {
              case stateElem(state, \/-(_1: NonTerminal.StdNtBase)) :: stackT =>
                (
                  state,
                  NonTerminal.NtBase._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s66: builder.State =
        builder.State(
          id = 66,
          acceptF = Some {
            case \/-(_: NonTerminal.Element) => s67
            case \/-(_: NonTerminal.AnonList) => s45
            case \/-(_: NonTerminal.ListBase) => s55
            case -\/(_: Token.literal) => s30
            case -\/(_: Token.nonTerminal) => s23
            case -\/(_: Token.terminal) => s25
            case -\/(_: Token.__.`(`) => s26
          },
          returnFs = Nil,
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s67: builder.State =
        builder.State(
          id = 67,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.Element)) :: stateElem(state, -\/(_1: Token.assocDir)) :: stackT =>
                (
                  state,
                  NonTerminal.AssocElement._1(_1, _2),
                  stackT,
                )
            },
            {
              case stateElem(state, \/-(_1: NonTerminal.Element)) :: stackT =>
                (
                  state,
                  NonTerminal.ListBase._1(_1),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s68: builder.State =
        builder.State(
          id = 68,
          acceptF = Some {
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case \/-(_: NonTerminal.AnonList5_2) => s71
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.ElementWExtras) => s69
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList5_2._2,
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s69: builder.State =
        builder.State(
          id = 69,
          acceptF = Some {
            case \/-(_: NonTerminal.`Optional_^`) => s31
            case \/-(_: NonTerminal.AnonList5_2) => s70
            case -\/(_: Token.__.`^`) => s28
            case \/-(_: NonTerminal.ElementWExtras) => s69
          },
          returnFs = Nil,
          spontaneouslyGenerates = List(
            NonTerminal.AnonList5_2._2,
            NonTerminal.`Optional_^`._2,
          ),
          finalReturnF = None,
        )
      lazy val s70: builder.State =
        builder.State(
          id = 70,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList5_2)) :: stateElem(state, \/-(_1: NonTerminal.ElementWExtras)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList5_2._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s71: builder.State =
        builder.State(
          id = 71,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.AnonList5_2)) :: stateElem(state, \/-(_1: NonTerminal.ElementWExtras)) :: stackT =>
                (
                  state,
                  NonTerminal.AnonList5._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s72: builder.State =
        builder.State(
          id = 72,
          acceptF = None,
          returnFs = List(
            {
              case elem(-\/(_5: Token.__.`)`)) :: elem(\/-(_4: NonTerminal.AnonList5)) :: elem(-\/(_3: Token.__.`.`)) :: elem(\/-(_2: NonTerminal.AnonList5)) :: stateElem(state, -\/(_1: Token.__.`(`)) :: stackT =>
                (
                  state,
                  NonTerminal.ListBase._3(_1, _2, _3, _4, _5),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )
      lazy val s73: builder.State =
        builder.State(
          id = 73,
          acceptF = None,
          returnFs = List(
            {
              case elem(\/-(_2: NonTerminal.StdRl)) :: stateElem(state, \/-(_1: NonTerminal.ElementWExtras)) :: stackT =>
                (
                  state,
                  NonTerminal.StdRl._1(_1, _2),
                  stackT,
                )
            },
          ),
          spontaneouslyGenerates = Nil,
          finalReturnF = None,
        )

      s0
    } {
      case (t1 @ HasSpanToken(s1), t2 @ HasSpanToken(s2)) =>
        (s2.start.abs > s1.start.abs).fold(t2, t1)
      case (eof @ Token.EOF, _) =>
        eof
      case (_, eof) =>
        eof
    }

  override def apply(input: String): List[String] \/ NonTerminal.Grammar =
    arch.Parser(lexer, grammar)(input)

}
